{"mappings":"AA+BkB,IAAAA,KAkBR,OAfU,IAAIC,SAAQ,CAACC,EAASC,KAClC,MAAMC,EAASC,KAAKC,SAAW,GAE/BC,YAAW,KACHH,GACAF,EAAQ,gBAAgBF,KAG5BG,EAAO,0CAA0C,GAV3C,IAWD,KAMCK,MAAKC,GAAKC,QAAQC,IAAIF,KAAIG,OAAMH,GAAKC,QAAQC,IAAIF","sources":["src/js/lection-promises.js"],"sourcesContent":["// const promise = new Promise((resolve, reject) => {\n//     const canFulfill = Math.random() > 0.5;\n\n//     setTimeout(() => {\n//         if (canFulfill) {\n//             resolve('Success');\n//         }\n\n//         reject('Error');\n//     }, 2000);\n// });\n\n// promise\n//     .then(onSuccess)\n//     .then(onSuccess)\n//     .catch(onError);\n    \n\n// function onSuccess(result) {\n//     console.log('Promise has result: ', result);\n//     return result;\n// };\n\n// function onError(error) {\n//     console.log('Promise has error: ', error);\n//     return error;\n// };\n\n// console.log(promise);\n\n\nconst makeOrder = dish => {\n    const DELAY = 1000;\n\n    const promise = new Promise((resolve, reject) => {\n        const passed = Math.random() > 0.5;\n\n        setTimeout(() => {\n            if (passed) {\n                resolve(`here you go: ${dish}`);\n            };\n\n            reject('Enschuldigung, der Kuhlschrank ist leer');\n        }, DELAY);\n    });\n\n    return promise;\n};\n\nmakeOrder('cake').then(x => console.log(x)).catch(x => console.log(x));\n"],"names":["dish","Promise","resolve","reject","passed","Math","random","setTimeout","then","x","console","log","catch"],"version":3,"file":"lection-promises.8c50d82a.js.map"}