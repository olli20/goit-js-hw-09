{"mappings":"AAAA,MAAMA,EAAO,CACTC,UAAWC,SAASC,cAAc,UAClCC,SAAUF,SAASC,cAAc,sBACjCE,QAASH,SAASC,cAAc,sBA2DpC,MAAMG,EAAQ,IApDd,MASIC,OACI,MAAMC,EAAOC,KAAKC,kBAAkB,GACpCD,KAAKE,OAAOH,E,CAGhBI,QACI,GAAIH,KAAKI,UACL,OAGJ,MAAMC,EAAYC,KAAKC,MACvBP,KAAKI,WAAY,EAEjBJ,KAAKQ,WAAaC,aAAY,KAC1B,MACMC,EADcJ,KAAKC,MACOF,EAC1BN,EAAOC,KAAKC,kBAAkBS,GAEpCV,KAAKE,OAAOH,EAAK,GAClB,I,CAGPY,OACIC,cAAcZ,KAAKQ,YACnBR,KAAKI,WAAY,EACjB,MAAML,EAAOC,KAAKC,kBAAkB,GACpCD,KAAKE,OAAOH,E,CAGhBE,kBAAkBF,GAKd,MAAO,C,MAJOC,KAAKa,IAAIC,KAAKC,MAAMhB,EAAS,MAAyB,O,KACvDC,KAAKa,IAAIC,KAAKC,MAAMhB,EAAS,KAAoB,M,KACjDC,KAAKa,IAAIC,KAAKC,MAAMhB,EAAS,IAAc,M,CAK5Dc,IAAIG,GACA,OAAOC,OAAOD,GAAOE,SAAS,EAAG,I,CA9CrCC,aAAYjB,OAAEA,IACVF,KAAKQ,WAAa,KAClBR,KAAKI,WAAY,EACjBJ,KAAKE,OAASA,EAEdF,KAAKF,M,GA8CW,CACpBI,OAzDoB,EAACkB,MAAEA,EAAKC,KAAEA,EAAIC,KAAEA,MACpC/B,EAAKC,UAAU+B,YAAc,GAAGH,KAASC,KAAQC,GAAM,IA2D3D/B,EAAKI,SAAS6B,iBAAiB,QAAS3B,EAAMM,MAAMsB,KAAK5B,IACzDN,EAAKK,QAAQ4B,iBAAiB,QAAS3B,EAAMc,KAAKc,KAAK5B","sources":["src/js/lesson-clock.js"],"sourcesContent":["const refs = {\n    clockface: document.querySelector('.clock'),\n    startBtn: document.querySelector('button[data-start]'),\n    stopBtn: document.querySelector('button[data-stop]'),\n}\n\nconst updateClockFace = ({ hours, mins, secs }) => {\n    refs.clockface.textContent = `${hours}:${mins}:${secs}`;\n};\n\nclass Timer {\n    constructor({ onTick }, ) {\n        this.intervalId = null;\n        this.isStarted = false;\n        this.onTick = onTick;\n\n        this.init();\n    }\n\n    init() {\n        const time = this.getTimeComponents(0);\n        this.onTick(time);\n    }\n    \n    start() {\n        if (this.isStarted) {\n            return;\n        };\n\n        const startTime = Date.now();\n        this.isStarted = true;\n\n        this.intervalId = setInterval(() => {\n            const currentTime = Date.now();\n            const deltaTime = currentTime - startTime;\n            const time = this.getTimeComponents(deltaTime);\n            \n            this.onTick(time);\n        }, 1000);\n    }\n\n    stop() {\n        clearInterval(this.intervalId);\n        this.isStarted = false;\n        const time = this.getTimeComponents(0);\n        this.onTick(time);\n    }\n\n    getTimeComponents(time) {\n        const hours = this.pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n        const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n        const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n\n        return { hours, mins, secs };\n    }\n\n    pad(value) {\n        return String(value).padStart(2, '0');\n    }\n\n};\n\nconst timer = new Timer({\n    onTick: updateClockFace,\n});\n\nrefs.startBtn.addEventListener('click', timer.start.bind(timer));\nrefs.stopBtn.addEventListener('click', timer.stop.bind(timer));\n\n \n"],"names":["$0772eaf22fbc7a76$var$refs","clockface","document","querySelector","startBtn","stopBtn","$0772eaf22fbc7a76$var$timer","init","time","this","getTimeComponents","onTick","start","isStarted","startTime","Date","now","intervalId","setInterval","deltaTime","stop","clearInterval","pad","Math","floor","value","String","padStart","constructor","hours","mins","secs","textContent","addEventListener","bind"],"version":3,"file":"lesson-clock.368220bb.js.map"}